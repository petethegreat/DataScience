?read.xlsx
library('xlsx')
?read.xlsx
dat<-read.xlsx('./data/Data.gov_NGAP.xlsx',1,rowIndex=18:23,colIndex = 7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
library('XML')
library('xml')
install.packages('XML')
library('XML')
library('xml')
install.packages('XML')
library('xml')
library('XML')
xmoose<-xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml')
xmoose<-xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml',useInternal=TRUE)
?xmlTreeParse
url<-'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml''
;
''
url<-'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
doc<-xmlTreeParse('url',useInternal=TRUE)
doc<-xmlTreeParse('url',useInternal=TRUE,method='curl')
download.file(url,destfile='./data/restaurants.xml',method='curl')
doc<-xmlTreeParse('./data/restaurants.xml')
rooty<-rootNode(doc)
rooty<-xmlRoot(doc)
names(rooty)
names(rooty[[1]])
names(rooty[[1]][[1]])
xpathSApply(rooty,'//zipcode',xmlValue)
test<-xpathSApply(rooty,'//zipcode',xmlValue)
?xpathSApply
test<-xpathSApply(rooty,'//zipcode',xmlValue)
test<-xpathSApply(doc,'//zipcode',xmlValue)
test<-xpathSApply(doc,'//zipcode',print)
test<-xpathSApply(rooty,'//zipcode',print)
test<-xpathApply(rooty,'//zipcode',xmlValue)
doc<-xmlTreeParse('./data/restaurants.xml',useInternalNodes = TRUE)
rooty<-xmlRoot(doc)
test<-xpathSApply(rooty,'//zipcode',xmlValue)
test
sum(test=='21231')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv',destfile='./data/quiz1q5.csv')
DT<-fread('./data/quiz1q5.csv')
library('data.table')
install.packages('data.table')
library('data.table')
fread('./data/quiz1q5.csv')
DT<-fread('./data/quiz1q5.csv')
system.time(DT[,mean,by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
meanpwgtp<-DT[,mean(pwgtp15),by=SEX]
meanpwgtp
system.time(sapply(splot(DT$pwgtp15,DT$SEX),mean)
)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))$user
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[1]
system.time(tapply(DT$pwgtp15),by=SEX))
system.time(tapply(DT$pwgtp15),by=SEX)
system.time(tapply(DT$pwgtp15,by=SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
options(digits=10)
system.time(mean(DT$pwgtp15,by=DT$SEX))
options(digits=12)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
options(digits=12)
system.time(mean(DT$pwgtp15,by=DT$SEX))
options(digits=18)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(for (i in 1:1000) {sapply(splot(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:1000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:1000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:1000){mean(DT$pwgtp15,by=DT$SEX)})
system.time(for (i in 1:1000){tapply(DT$pwgtp15,by=SEX)})
system.time(for (i in 1:1000){tapply(DT$pwgtp15,by=SEX)})
system.time(tapply(DT$pwgtp15,by=SEX))
system.time(tapply(DT$pwgtp15),by=SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(for(i in 1:1000){mean(DT$pwgtp15,by=DT$SEX)})
system.time(for (i in 1:1000){mean(DT$pwgtp15,by=DT$SEX)})
system.time(for (i in 1:1000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:1000){tapply(DT$pwgtp15,by=SEX)})
system.time(for (i in 1:1000){tapply(DT$pwgtp15,by=DT$SEX)})
system.time(tapply(DT$pwgtp15,by=SEX))
system.time(tapply(DT$pwgtp15,by=SEX))
system.time(tapply(DT$pwgtp15,by=SEX))
?tapply
system.time(tapply(DT$pwgtp15,SEX.mean))
system.time(tapply(DT$pwgtp15,SEX,mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(for(i in 1:1000){tapply(DT$pwgtp15,DT$SEX,mean)})
sum(dat$Zip*dat$Ext,na.rm=T)
rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2]
rowMeans(DT)
?replicate
mean(DT$pwgtp15,by=DT$SEX)
?mean
mean(DT$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
#system.time()
?replicate
tapplyfunction<-function(){tapply(DT$pwgtp15,DT$SEX,mean)}
dummy<-replicate(10,tapplyfunction)
dummy
dummy<-replicate(10,tapplyfunction())
dummy
moose<-replicate(10,rnorm())
moose<-replicate(10,rnorm(1))
moose
dummy<-replicate(10,tapplyfunction())
dummy
system.time(replicate(1000,tapplyfunction()))
tapplyfunction()
tapplyfunction
DTmean<-function(){DT[,mean(pwgtp15),by=SEX]}
DTmean()
sapplyfunction<-function(){sapply(split(DT$pwgtp15,DT$SEX),mean)}
sapplyfunction()
tapplyfunction(
)
DTmean()
system.time(replicate(1000,sapplyfunction()))
system.time(replicate(1000,DTmean())
)
system.time(replicate(1000,DTmean()))
system.time(replicate(1000,tapplyfunction()))
system.time(replicate(10000,DTmean()))
system.time(replicate(10000,sapplyfunction()))
system.time(replicate(10000,tapplyfunction()))
system.time(replicate(10000,DTmean()))
system.time(replicate(10000,sapplyfunction()))
system.time(replicate(10000,sapplyfunction()))
doabunch<-function(func,ntimes=1000){for (i in 1:ntimes }{func()}}
doabunch<-function(func,ntimes=1000){for (i in 1:ntimes ){func()}}
system.time(doabunch(sapplyfunction))
system.time(doabunch(tapplyfunction))
system.time(doabunch(DTmean))
system.time(doabunch(DTmean))
system.time(doabunch(sapplyfunction))
system.time(doabunch(sapplyfunction))
DTmean()
swirl()
library(swirl)
swirl()
?n
?n_distinct
submit()
submit()
submit()
submit()
source summarize1.R
source('summarize1.R')
pack_sum <- summarize(by_package,
count = n(ip_id),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size),
)
by_package
pack_sum <- summarize(by_package,
count = n(ip_id),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size)
)
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size)
)
pack_sum
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count > 679)
top_coutns
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count()))
top_counts_sorted<-arrange(top_counts,desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique > 465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count,-grade)
res
?seperate
?separate
separate(res,sex_class,into=c('sex','class'))
submit()
students3
?gather
submit()
?spread
submit()
library(reader)
library(readr)
parse_number("class5")
?mutate
submit()
submit()
students4
submit()
submit()
?unique
submit()
submit()
passed
failed
passed<-passed %>% mutate(status='passed')
failed<-failed %>% mutate(status='failed')
bind_rows(passed,failed)
sat
submit()
submit()
?separate
submit()
?mutate
submit()
ys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
second(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ynd_hms(dt1)
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 14, minutes = 19)
this_moment<-update(this_moment, hours = 14, minutes = 19)
this_moment
now(timezone="America/New York")
?now
now(tzone="America/New York")
now
now()
nyc<-now(tzone="America/New York")
nyc<-now("America/New York")
nyc<-now("America/New York")
info()
skip()
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,minutes=34,hours=17)
depart
arrive<-depart + hours(15) + mins(50)
arrive<-depart + hours(15) + minutess(50)
arrive<-depart + hours(15) + minutes(50)
?with_tz
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?interval
how_long<-interval(last_time,arrive)
as.period(how_long)
stopwatch()
quit()
